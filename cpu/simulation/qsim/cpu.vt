// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/19/2020 11:42:38"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    cpu
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cpu_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module cpu_vlg_check_tst (
	ad,
	Alu,
	ALudata,
	dataout,
	datout2,
	m0,
	m1,
	m2,
	m3,
	m4,
	memre,
	memwe,
	pcvalue,
	regwe,
	regwirtedata,
	rg0,
	rg1,
	rg2,
	rg3,
	writeaddr,
	writedata,
	sampler_rx
);
input [7:0] ad;
input  Alu;
input [7:0] ALudata;
input [7:0] dataout;
input [7:0] datout2;
input [7:0] m0;
input [7:0] m1;
input [7:0] m2;
input [7:0] m3;
input [7:0] m4;
input  memre;
input  memwe;
input [7:0] pcvalue;
input  regwe;
input [7:0] regwirtedata;
input [7:0] rg0;
input [7:0] rg1;
input [7:0] rg2;
input [7:0] rg3;
input [7:0] writeaddr;
input [7:0] writedata;
input sampler_rx;

reg [7:0] ad_expected;
reg  Alu_expected;
reg [7:0] ALudata_expected;
reg [7:0] dataout_expected;
reg [7:0] datout2_expected;
reg [7:0] m0_expected;
reg [7:0] m1_expected;
reg [7:0] m2_expected;
reg [7:0] m3_expected;
reg [7:0] m4_expected;
reg  memre_expected;
reg  memwe_expected;
reg [7:0] pcvalue_expected;
reg  regwe_expected;
reg [7:0] regwirtedata_expected;
reg [7:0] rg0_expected;
reg [7:0] rg1_expected;
reg [7:0] rg2_expected;
reg [7:0] rg3_expected;
reg [7:0] writeaddr_expected;
reg [7:0] writedata_expected;

reg [7:0] ad_prev;
reg  Alu_prev;
reg [7:0] ALudata_prev;
reg [7:0] dataout_prev;
reg [7:0] datout2_prev;
reg [7:0] m0_prev;
reg [7:0] m1_prev;
reg [7:0] m2_prev;
reg [7:0] m3_prev;
reg [7:0] m4_prev;
reg  memre_prev;
reg  memwe_prev;
reg [7:0] pcvalue_prev;
reg  regwe_prev;
reg [7:0] regwirtedata_prev;
reg [7:0] rg0_prev;
reg [7:0] rg1_prev;
reg [7:0] rg2_prev;
reg [7:0] rg3_prev;
reg [7:0] writeaddr_prev;
reg [7:0] writedata_prev;

reg [7:0] ad_expected_prev;
reg  Alu_expected_prev;
reg [7:0] ALudata_expected_prev;
reg [7:0] dataout_expected_prev;
reg [7:0] datout2_expected_prev;
reg [7:0] m0_expected_prev;
reg [7:0] m1_expected_prev;
reg [7:0] m2_expected_prev;
reg [7:0] m3_expected_prev;
reg [7:0] m4_expected_prev;
reg  memre_expected_prev;
reg  memwe_expected_prev;
reg [7:0] pcvalue_expected_prev;
reg  regwe_expected_prev;
reg [7:0] regwirtedata_expected_prev;
reg [7:0] rg0_expected_prev;
reg [7:0] rg1_expected_prev;
reg [7:0] rg2_expected_prev;
reg [7:0] rg3_expected_prev;
reg [7:0] writeaddr_expected_prev;
reg [7:0] writedata_expected_prev;

reg [7:0] last_ad_exp;
reg  last_Alu_exp;
reg [7:0] last_ALudata_exp;
reg [7:0] last_dataout_exp;
reg [7:0] last_datout2_exp;
reg [7:0] last_m0_exp;
reg [7:0] last_m1_exp;
reg [7:0] last_m2_exp;
reg [7:0] last_m3_exp;
reg [7:0] last_m4_exp;
reg  last_memre_exp;
reg  last_memwe_exp;
reg [7:0] last_pcvalue_exp;
reg  last_regwe_exp;
reg [7:0] last_regwirtedata_exp;
reg [7:0] last_rg0_exp;
reg [7:0] last_rg1_exp;
reg [7:0] last_rg2_exp;
reg [7:0] last_rg3_exp;
reg [7:0] last_writeaddr_exp;
reg [7:0] last_writedata_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:21] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 21'b1;
end

// update real /o prevs

always @(trigger)
begin
	ad_prev = ad;
	Alu_prev = Alu;
	ALudata_prev = ALudata;
	dataout_prev = dataout;
	datout2_prev = datout2;
	m0_prev = m0;
	m1_prev = m1;
	m2_prev = m2;
	m3_prev = m3;
	m4_prev = m4;
	memre_prev = memre;
	memwe_prev = memwe;
	pcvalue_prev = pcvalue;
	regwe_prev = regwe;
	regwirtedata_prev = regwirtedata;
	rg0_prev = rg0;
	rg1_prev = rg1;
	rg2_prev = rg2;
	rg3_prev = rg3;
	writeaddr_prev = writeaddr;
	writedata_prev = writedata;
end

// update expected /o prevs

always @(trigger)
begin
	ad_expected_prev = ad_expected;
	Alu_expected_prev = Alu_expected;
	ALudata_expected_prev = ALudata_expected;
	dataout_expected_prev = dataout_expected;
	datout2_expected_prev = datout2_expected;
	m0_expected_prev = m0_expected;
	m1_expected_prev = m1_expected;
	m2_expected_prev = m2_expected;
	m3_expected_prev = m3_expected;
	m4_expected_prev = m4_expected;
	memre_expected_prev = memre_expected;
	memwe_expected_prev = memwe_expected;
	pcvalue_expected_prev = pcvalue_expected;
	regwe_expected_prev = regwe_expected;
	regwirtedata_expected_prev = regwirtedata_expected;
	rg0_expected_prev = rg0_expected;
	rg1_expected_prev = rg1_expected;
	rg2_expected_prev = rg2_expected;
	rg3_expected_prev = rg3_expected;
	writeaddr_expected_prev = writeaddr_expected;
	writedata_expected_prev = writedata_expected;
end


// expected ad[ 7 ]
initial
begin
	ad_expected[7] = 1'bX;
end 
// expected ad[ 6 ]
initial
begin
	ad_expected[6] = 1'bX;
end 
// expected ad[ 5 ]
initial
begin
	ad_expected[5] = 1'bX;
end 
// expected ad[ 4 ]
initial
begin
	ad_expected[4] = 1'bX;
end 
// expected ad[ 3 ]
initial
begin
	ad_expected[3] = 1'bX;
end 
// expected ad[ 2 ]
initial
begin
	ad_expected[2] = 1'bX;
end 
// expected ad[ 1 ]
initial
begin
	ad_expected[1] = 1'bX;
end 
// expected ad[ 0 ]
initial
begin
	ad_expected[0] = 1'bX;
end 
// expected dataout[ 7 ]
initial
begin
	dataout_expected[7] = 1'bX;
end 
// expected dataout[ 6 ]
initial
begin
	dataout_expected[6] = 1'bX;
end 
// expected dataout[ 5 ]
initial
begin
	dataout_expected[5] = 1'bX;
end 
// expected dataout[ 4 ]
initial
begin
	dataout_expected[4] = 1'bX;
end 
// expected dataout[ 3 ]
initial
begin
	dataout_expected[3] = 1'bX;
end 
// expected dataout[ 2 ]
initial
begin
	dataout_expected[2] = 1'bX;
end 
// expected dataout[ 1 ]
initial
begin
	dataout_expected[1] = 1'bX;
end 
// expected dataout[ 0 ]
initial
begin
	dataout_expected[0] = 1'bX;
end 
// expected ALudata[ 7 ]
initial
begin
	ALudata_expected[7] = 1'bX;
end 
// expected ALudata[ 6 ]
initial
begin
	ALudata_expected[6] = 1'bX;
end 
// expected ALudata[ 5 ]
initial
begin
	ALudata_expected[5] = 1'bX;
end 
// expected ALudata[ 4 ]
initial
begin
	ALudata_expected[4] = 1'bX;
end 
// expected ALudata[ 3 ]
initial
begin
	ALudata_expected[3] = 1'bX;
end 
// expected ALudata[ 2 ]
initial
begin
	ALudata_expected[2] = 1'bX;
end 
// expected ALudata[ 1 ]
initial
begin
	ALudata_expected[1] = 1'bX;
end 
// expected ALudata[ 0 ]
initial
begin
	ALudata_expected[0] = 1'bX;
end 

// expected Alu
initial
begin
	Alu_expected = 1'bX;
end 
// expected datout2[ 7 ]
initial
begin
	datout2_expected[7] = 1'bX;
end 
// expected datout2[ 6 ]
initial
begin
	datout2_expected[6] = 1'bX;
end 
// expected datout2[ 5 ]
initial
begin
	datout2_expected[5] = 1'bX;
end 
// expected datout2[ 4 ]
initial
begin
	datout2_expected[4] = 1'bX;
end 
// expected datout2[ 3 ]
initial
begin
	datout2_expected[3] = 1'bX;
end 
// expected datout2[ 2 ]
initial
begin
	datout2_expected[2] = 1'bX;
end 
// expected datout2[ 1 ]
initial
begin
	datout2_expected[1] = 1'bX;
end 
// expected datout2[ 0 ]
initial
begin
	datout2_expected[0] = 1'bX;
end 
// expected writeaddr[ 7 ]
initial
begin
	writeaddr_expected[7] = 1'bX;
end 
// expected writeaddr[ 6 ]
initial
begin
	writeaddr_expected[6] = 1'bX;
end 
// expected writeaddr[ 5 ]
initial
begin
	writeaddr_expected[5] = 1'bX;
end 
// expected writeaddr[ 4 ]
initial
begin
	writeaddr_expected[4] = 1'bX;
end 
// expected writeaddr[ 3 ]
initial
begin
	writeaddr_expected[3] = 1'bX;
end 
// expected writeaddr[ 2 ]
initial
begin
	writeaddr_expected[2] = 1'bX;
end 
// expected writeaddr[ 1 ]
initial
begin
	writeaddr_expected[1] = 1'bX;
end 
// expected writeaddr[ 0 ]
initial
begin
	writeaddr_expected[0] = 1'bX;
end 
// expected writedata[ 7 ]
initial
begin
	writedata_expected[7] = 1'bX;
end 
// expected writedata[ 6 ]
initial
begin
	writedata_expected[6] = 1'bX;
end 
// expected writedata[ 5 ]
initial
begin
	writedata_expected[5] = 1'bX;
end 
// expected writedata[ 4 ]
initial
begin
	writedata_expected[4] = 1'bX;
end 
// expected writedata[ 3 ]
initial
begin
	writedata_expected[3] = 1'bX;
end 
// expected writedata[ 2 ]
initial
begin
	writedata_expected[2] = 1'bX;
end 
// expected writedata[ 1 ]
initial
begin
	writedata_expected[1] = 1'bX;
end 
// expected writedata[ 0 ]
initial
begin
	writedata_expected[0] = 1'bX;
end 

// expected memwe
initial
begin
	memwe_expected = 1'bX;
end 

// expected memre
initial
begin
	memre_expected = 1'bX;
end 
// expected regwirtedata[ 7 ]
initial
begin
	regwirtedata_expected[7] = 1'bX;
end 
// expected regwirtedata[ 6 ]
initial
begin
	regwirtedata_expected[6] = 1'bX;
end 
// expected regwirtedata[ 5 ]
initial
begin
	regwirtedata_expected[5] = 1'bX;
end 
// expected regwirtedata[ 4 ]
initial
begin
	regwirtedata_expected[4] = 1'bX;
end 
// expected regwirtedata[ 3 ]
initial
begin
	regwirtedata_expected[3] = 1'bX;
end 
// expected regwirtedata[ 2 ]
initial
begin
	regwirtedata_expected[2] = 1'bX;
end 
// expected regwirtedata[ 1 ]
initial
begin
	regwirtedata_expected[1] = 1'bX;
end 
// expected regwirtedata[ 0 ]
initial
begin
	regwirtedata_expected[0] = 1'bX;
end 
// expected pcvalue[ 7 ]
initial
begin
	pcvalue_expected[7] = 1'bX;
end 
// expected pcvalue[ 6 ]
initial
begin
	pcvalue_expected[6] = 1'bX;
end 
// expected pcvalue[ 5 ]
initial
begin
	pcvalue_expected[5] = 1'bX;
end 
// expected pcvalue[ 4 ]
initial
begin
	pcvalue_expected[4] = 1'bX;
end 
// expected pcvalue[ 3 ]
initial
begin
	pcvalue_expected[3] = 1'bX;
end 
// expected pcvalue[ 2 ]
initial
begin
	pcvalue_expected[2] = 1'bX;
end 
// expected pcvalue[ 1 ]
initial
begin
	pcvalue_expected[1] = 1'bX;
end 
// expected pcvalue[ 0 ]
initial
begin
	pcvalue_expected[0] = 1'bX;
end 
// expected m0[ 7 ]
initial
begin
	m0_expected[7] = 1'bX;
end 
// expected m0[ 6 ]
initial
begin
	m0_expected[6] = 1'bX;
end 
// expected m0[ 5 ]
initial
begin
	m0_expected[5] = 1'bX;
end 
// expected m0[ 4 ]
initial
begin
	m0_expected[4] = 1'bX;
end 
// expected m0[ 3 ]
initial
begin
	m0_expected[3] = 1'bX;
end 
// expected m0[ 2 ]
initial
begin
	m0_expected[2] = 1'bX;
end 
// expected m0[ 1 ]
initial
begin
	m0_expected[1] = 1'bX;
end 
// expected m0[ 0 ]
initial
begin
	m0_expected[0] = 1'bX;
end 
// expected m1[ 7 ]
initial
begin
	m1_expected[7] = 1'bX;
end 
// expected m1[ 6 ]
initial
begin
	m1_expected[6] = 1'bX;
end 
// expected m1[ 5 ]
initial
begin
	m1_expected[5] = 1'bX;
end 
// expected m1[ 4 ]
initial
begin
	m1_expected[4] = 1'bX;
end 
// expected m1[ 3 ]
initial
begin
	m1_expected[3] = 1'bX;
end 
// expected m1[ 2 ]
initial
begin
	m1_expected[2] = 1'bX;
end 
// expected m1[ 1 ]
initial
begin
	m1_expected[1] = 1'bX;
end 
// expected m1[ 0 ]
initial
begin
	m1_expected[0] = 1'bX;
end 
// expected m2[ 7 ]
initial
begin
	m2_expected[7] = 1'bX;
end 
// expected m2[ 6 ]
initial
begin
	m2_expected[6] = 1'bX;
end 
// expected m2[ 5 ]
initial
begin
	m2_expected[5] = 1'bX;
end 
// expected m2[ 4 ]
initial
begin
	m2_expected[4] = 1'bX;
end 
// expected m2[ 3 ]
initial
begin
	m2_expected[3] = 1'bX;
end 
// expected m2[ 2 ]
initial
begin
	m2_expected[2] = 1'bX;
end 
// expected m2[ 1 ]
initial
begin
	m2_expected[1] = 1'bX;
end 
// expected m2[ 0 ]
initial
begin
	m2_expected[0] = 1'bX;
end 
// expected m3[ 7 ]
initial
begin
	m3_expected[7] = 1'bX;
end 
// expected m3[ 6 ]
initial
begin
	m3_expected[6] = 1'bX;
end 
// expected m3[ 5 ]
initial
begin
	m3_expected[5] = 1'bX;
end 
// expected m3[ 4 ]
initial
begin
	m3_expected[4] = 1'bX;
end 
// expected m3[ 3 ]
initial
begin
	m3_expected[3] = 1'bX;
end 
// expected m3[ 2 ]
initial
begin
	m3_expected[2] = 1'bX;
end 
// expected m3[ 1 ]
initial
begin
	m3_expected[1] = 1'bX;
end 
// expected m3[ 0 ]
initial
begin
	m3_expected[0] = 1'bX;
end 
// expected m4[ 7 ]
initial
begin
	m4_expected[7] = 1'bX;
end 
// expected m4[ 6 ]
initial
begin
	m4_expected[6] = 1'bX;
end 
// expected m4[ 5 ]
initial
begin
	m4_expected[5] = 1'bX;
end 
// expected m4[ 4 ]
initial
begin
	m4_expected[4] = 1'bX;
end 
// expected m4[ 3 ]
initial
begin
	m4_expected[3] = 1'bX;
end 
// expected m4[ 2 ]
initial
begin
	m4_expected[2] = 1'bX;
end 
// expected m4[ 1 ]
initial
begin
	m4_expected[1] = 1'bX;
end 
// expected m4[ 0 ]
initial
begin
	m4_expected[0] = 1'bX;
end 
// expected rg0[ 7 ]
initial
begin
	rg0_expected[7] = 1'bX;
end 
// expected rg0[ 6 ]
initial
begin
	rg0_expected[6] = 1'bX;
end 
// expected rg0[ 5 ]
initial
begin
	rg0_expected[5] = 1'bX;
end 
// expected rg0[ 4 ]
initial
begin
	rg0_expected[4] = 1'bX;
end 
// expected rg0[ 3 ]
initial
begin
	rg0_expected[3] = 1'bX;
end 
// expected rg0[ 2 ]
initial
begin
	rg0_expected[2] = 1'bX;
end 
// expected rg0[ 1 ]
initial
begin
	rg0_expected[1] = 1'bX;
end 
// expected rg0[ 0 ]
initial
begin
	rg0_expected[0] = 1'bX;
end 
// expected rg1[ 7 ]
initial
begin
	rg1_expected[7] = 1'bX;
end 
// expected rg1[ 6 ]
initial
begin
	rg1_expected[6] = 1'bX;
end 
// expected rg1[ 5 ]
initial
begin
	rg1_expected[5] = 1'bX;
end 
// expected rg1[ 4 ]
initial
begin
	rg1_expected[4] = 1'bX;
end 
// expected rg1[ 3 ]
initial
begin
	rg1_expected[3] = 1'bX;
end 
// expected rg1[ 2 ]
initial
begin
	rg1_expected[2] = 1'bX;
end 
// expected rg1[ 1 ]
initial
begin
	rg1_expected[1] = 1'bX;
end 
// expected rg1[ 0 ]
initial
begin
	rg1_expected[0] = 1'bX;
end 
// expected rg2[ 7 ]
initial
begin
	rg2_expected[7] = 1'bX;
end 
// expected rg2[ 6 ]
initial
begin
	rg2_expected[6] = 1'bX;
end 
// expected rg2[ 5 ]
initial
begin
	rg2_expected[5] = 1'bX;
end 
// expected rg2[ 4 ]
initial
begin
	rg2_expected[4] = 1'bX;
end 
// expected rg2[ 3 ]
initial
begin
	rg2_expected[3] = 1'bX;
end 
// expected rg2[ 2 ]
initial
begin
	rg2_expected[2] = 1'bX;
end 
// expected rg2[ 1 ]
initial
begin
	rg2_expected[1] = 1'bX;
end 
// expected rg2[ 0 ]
initial
begin
	rg2_expected[0] = 1'bX;
end 
// expected rg3[ 7 ]
initial
begin
	rg3_expected[7] = 1'bX;
end 
// expected rg3[ 6 ]
initial
begin
	rg3_expected[6] = 1'bX;
end 
// expected rg3[ 5 ]
initial
begin
	rg3_expected[5] = 1'bX;
end 
// expected rg3[ 4 ]
initial
begin
	rg3_expected[4] = 1'bX;
end 
// expected rg3[ 3 ]
initial
begin
	rg3_expected[3] = 1'bX;
end 
// expected rg3[ 2 ]
initial
begin
	rg3_expected[2] = 1'bX;
end 
// expected rg3[ 1 ]
initial
begin
	rg3_expected[1] = 1'bX;
end 
// expected rg3[ 0 ]
initial
begin
	rg3_expected[0] = 1'bX;
end 

// expected regwe
initial
begin
	regwe_expected = 1'bX;
end 
// generate trigger
always @(ad_expected or ad or Alu_expected or Alu or ALudata_expected or ALudata or dataout_expected or dataout or datout2_expected or datout2 or m0_expected or m0 or m1_expected or m1 or m2_expected or m2 or m3_expected or m3 or m4_expected or m4 or memre_expected or memre or memwe_expected or memwe or pcvalue_expected or pcvalue or regwe_expected or regwe or regwirtedata_expected or regwirtedata or rg0_expected or rg0 or rg1_expected or rg1 or rg2_expected or rg2 or rg3_expected or rg3 or writeaddr_expected or writeaddr or writedata_expected or writedata)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ad = %b | expected Alu = %b | expected ALudata = %b | expected dataout = %b | expected datout2 = %b | expected m0 = %b | expected m1 = %b | expected m2 = %b | expected m3 = %b | expected m4 = %b | expected memre = %b | expected memwe = %b | expected pcvalue = %b | expected regwe = %b | expected regwirtedata = %b | expected rg0 = %b | expected rg1 = %b | expected rg2 = %b | expected rg3 = %b | expected writeaddr = %b | expected writedata = %b | ",ad_expected_prev,Alu_expected_prev,ALudata_expected_prev,dataout_expected_prev,datout2_expected_prev,m0_expected_prev,m1_expected_prev,m2_expected_prev,m3_expected_prev,m4_expected_prev,memre_expected_prev,memwe_expected_prev,pcvalue_expected_prev,regwe_expected_prev,regwirtedata_expected_prev,rg0_expected_prev,rg1_expected_prev,rg2_expected_prev,rg3_expected_prev,writeaddr_expected_prev,writedata_expected_prev);
	$display("| real ad = %b | real Alu = %b | real ALudata = %b | real dataout = %b | real datout2 = %b | real m0 = %b | real m1 = %b | real m2 = %b | real m3 = %b | real m4 = %b | real memre = %b | real memwe = %b | real pcvalue = %b | real regwe = %b | real regwirtedata = %b | real rg0 = %b | real rg1 = %b | real rg2 = %b | real rg3 = %b | real writeaddr = %b | real writedata = %b | ",ad_prev,Alu_prev,ALudata_prev,dataout_prev,datout2_prev,m0_prev,m1_prev,m2_prev,m3_prev,m4_prev,memre_prev,memwe_prev,pcvalue_prev,regwe_prev,regwirtedata_prev,rg0_prev,rg1_prev,rg2_prev,rg3_prev,writeaddr_prev,writedata_prev);
`endif
	if (
		( ad_expected_prev[0] !== 1'bx ) && ( ad_prev[0] !== ad_expected_prev[0] )
		&& ((ad_expected_prev[0] !== last_ad_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ad[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ad_expected_prev);
		$display ("     Real value = %b", ad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ad_exp[0] = ad_expected_prev[0];
	end
	if (
		( ad_expected_prev[1] !== 1'bx ) && ( ad_prev[1] !== ad_expected_prev[1] )
		&& ((ad_expected_prev[1] !== last_ad_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ad[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ad_expected_prev);
		$display ("     Real value = %b", ad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ad_exp[1] = ad_expected_prev[1];
	end
	if (
		( ad_expected_prev[2] !== 1'bx ) && ( ad_prev[2] !== ad_expected_prev[2] )
		&& ((ad_expected_prev[2] !== last_ad_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ad[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ad_expected_prev);
		$display ("     Real value = %b", ad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ad_exp[2] = ad_expected_prev[2];
	end
	if (
		( ad_expected_prev[3] !== 1'bx ) && ( ad_prev[3] !== ad_expected_prev[3] )
		&& ((ad_expected_prev[3] !== last_ad_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ad[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ad_expected_prev);
		$display ("     Real value = %b", ad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ad_exp[3] = ad_expected_prev[3];
	end
	if (
		( ad_expected_prev[4] !== 1'bx ) && ( ad_prev[4] !== ad_expected_prev[4] )
		&& ((ad_expected_prev[4] !== last_ad_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ad[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ad_expected_prev);
		$display ("     Real value = %b", ad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ad_exp[4] = ad_expected_prev[4];
	end
	if (
		( ad_expected_prev[5] !== 1'bx ) && ( ad_prev[5] !== ad_expected_prev[5] )
		&& ((ad_expected_prev[5] !== last_ad_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ad[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ad_expected_prev);
		$display ("     Real value = %b", ad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ad_exp[5] = ad_expected_prev[5];
	end
	if (
		( ad_expected_prev[6] !== 1'bx ) && ( ad_prev[6] !== ad_expected_prev[6] )
		&& ((ad_expected_prev[6] !== last_ad_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ad[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ad_expected_prev);
		$display ("     Real value = %b", ad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ad_exp[6] = ad_expected_prev[6];
	end
	if (
		( ad_expected_prev[7] !== 1'bx ) && ( ad_prev[7] !== ad_expected_prev[7] )
		&& ((ad_expected_prev[7] !== last_ad_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ad[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ad_expected_prev);
		$display ("     Real value = %b", ad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ad_exp[7] = ad_expected_prev[7];
	end
	if (
		( Alu_expected_prev !== 1'bx ) && ( Alu_prev !== Alu_expected_prev )
		&& ((Alu_expected_prev !== last_Alu_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Alu :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Alu_expected_prev);
		$display ("     Real value = %b", Alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Alu_exp = Alu_expected_prev;
	end
	if (
		( ALudata_expected_prev[0] !== 1'bx ) && ( ALudata_prev[0] !== ALudata_expected_prev[0] )
		&& ((ALudata_expected_prev[0] !== last_ALudata_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALudata[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALudata_expected_prev);
		$display ("     Real value = %b", ALudata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALudata_exp[0] = ALudata_expected_prev[0];
	end
	if (
		( ALudata_expected_prev[1] !== 1'bx ) && ( ALudata_prev[1] !== ALudata_expected_prev[1] )
		&& ((ALudata_expected_prev[1] !== last_ALudata_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALudata[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALudata_expected_prev);
		$display ("     Real value = %b", ALudata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALudata_exp[1] = ALudata_expected_prev[1];
	end
	if (
		( ALudata_expected_prev[2] !== 1'bx ) && ( ALudata_prev[2] !== ALudata_expected_prev[2] )
		&& ((ALudata_expected_prev[2] !== last_ALudata_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALudata[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALudata_expected_prev);
		$display ("     Real value = %b", ALudata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALudata_exp[2] = ALudata_expected_prev[2];
	end
	if (
		( ALudata_expected_prev[3] !== 1'bx ) && ( ALudata_prev[3] !== ALudata_expected_prev[3] )
		&& ((ALudata_expected_prev[3] !== last_ALudata_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALudata[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALudata_expected_prev);
		$display ("     Real value = %b", ALudata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALudata_exp[3] = ALudata_expected_prev[3];
	end
	if (
		( ALudata_expected_prev[4] !== 1'bx ) && ( ALudata_prev[4] !== ALudata_expected_prev[4] )
		&& ((ALudata_expected_prev[4] !== last_ALudata_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALudata[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALudata_expected_prev);
		$display ("     Real value = %b", ALudata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALudata_exp[4] = ALudata_expected_prev[4];
	end
	if (
		( ALudata_expected_prev[5] !== 1'bx ) && ( ALudata_prev[5] !== ALudata_expected_prev[5] )
		&& ((ALudata_expected_prev[5] !== last_ALudata_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALudata[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALudata_expected_prev);
		$display ("     Real value = %b", ALudata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALudata_exp[5] = ALudata_expected_prev[5];
	end
	if (
		( ALudata_expected_prev[6] !== 1'bx ) && ( ALudata_prev[6] !== ALudata_expected_prev[6] )
		&& ((ALudata_expected_prev[6] !== last_ALudata_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALudata[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALudata_expected_prev);
		$display ("     Real value = %b", ALudata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALudata_exp[6] = ALudata_expected_prev[6];
	end
	if (
		( ALudata_expected_prev[7] !== 1'bx ) && ( ALudata_prev[7] !== ALudata_expected_prev[7] )
		&& ((ALudata_expected_prev[7] !== last_ALudata_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALudata[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALudata_expected_prev);
		$display ("     Real value = %b", ALudata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALudata_exp[7] = ALudata_expected_prev[7];
	end
	if (
		( dataout_expected_prev[0] !== 1'bx ) && ( dataout_prev[0] !== dataout_expected_prev[0] )
		&& ((dataout_expected_prev[0] !== last_dataout_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dataout_exp[0] = dataout_expected_prev[0];
	end
	if (
		( dataout_expected_prev[1] !== 1'bx ) && ( dataout_prev[1] !== dataout_expected_prev[1] )
		&& ((dataout_expected_prev[1] !== last_dataout_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dataout_exp[1] = dataout_expected_prev[1];
	end
	if (
		( dataout_expected_prev[2] !== 1'bx ) && ( dataout_prev[2] !== dataout_expected_prev[2] )
		&& ((dataout_expected_prev[2] !== last_dataout_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dataout_exp[2] = dataout_expected_prev[2];
	end
	if (
		( dataout_expected_prev[3] !== 1'bx ) && ( dataout_prev[3] !== dataout_expected_prev[3] )
		&& ((dataout_expected_prev[3] !== last_dataout_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dataout_exp[3] = dataout_expected_prev[3];
	end
	if (
		( dataout_expected_prev[4] !== 1'bx ) && ( dataout_prev[4] !== dataout_expected_prev[4] )
		&& ((dataout_expected_prev[4] !== last_dataout_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dataout_exp[4] = dataout_expected_prev[4];
	end
	if (
		( dataout_expected_prev[5] !== 1'bx ) && ( dataout_prev[5] !== dataout_expected_prev[5] )
		&& ((dataout_expected_prev[5] !== last_dataout_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dataout_exp[5] = dataout_expected_prev[5];
	end
	if (
		( dataout_expected_prev[6] !== 1'bx ) && ( dataout_prev[6] !== dataout_expected_prev[6] )
		&& ((dataout_expected_prev[6] !== last_dataout_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dataout_exp[6] = dataout_expected_prev[6];
	end
	if (
		( dataout_expected_prev[7] !== 1'bx ) && ( dataout_prev[7] !== dataout_expected_prev[7] )
		&& ((dataout_expected_prev[7] !== last_dataout_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dataout_exp[7] = dataout_expected_prev[7];
	end
	if (
		( datout2_expected_prev[0] !== 1'bx ) && ( datout2_prev[0] !== datout2_expected_prev[0] )
		&& ((datout2_expected_prev[0] !== last_datout2_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datout2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datout2_expected_prev);
		$display ("     Real value = %b", datout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_datout2_exp[0] = datout2_expected_prev[0];
	end
	if (
		( datout2_expected_prev[1] !== 1'bx ) && ( datout2_prev[1] !== datout2_expected_prev[1] )
		&& ((datout2_expected_prev[1] !== last_datout2_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datout2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datout2_expected_prev);
		$display ("     Real value = %b", datout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_datout2_exp[1] = datout2_expected_prev[1];
	end
	if (
		( datout2_expected_prev[2] !== 1'bx ) && ( datout2_prev[2] !== datout2_expected_prev[2] )
		&& ((datout2_expected_prev[2] !== last_datout2_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datout2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datout2_expected_prev);
		$display ("     Real value = %b", datout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_datout2_exp[2] = datout2_expected_prev[2];
	end
	if (
		( datout2_expected_prev[3] !== 1'bx ) && ( datout2_prev[3] !== datout2_expected_prev[3] )
		&& ((datout2_expected_prev[3] !== last_datout2_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datout2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datout2_expected_prev);
		$display ("     Real value = %b", datout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_datout2_exp[3] = datout2_expected_prev[3];
	end
	if (
		( datout2_expected_prev[4] !== 1'bx ) && ( datout2_prev[4] !== datout2_expected_prev[4] )
		&& ((datout2_expected_prev[4] !== last_datout2_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datout2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datout2_expected_prev);
		$display ("     Real value = %b", datout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_datout2_exp[4] = datout2_expected_prev[4];
	end
	if (
		( datout2_expected_prev[5] !== 1'bx ) && ( datout2_prev[5] !== datout2_expected_prev[5] )
		&& ((datout2_expected_prev[5] !== last_datout2_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datout2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datout2_expected_prev);
		$display ("     Real value = %b", datout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_datout2_exp[5] = datout2_expected_prev[5];
	end
	if (
		( datout2_expected_prev[6] !== 1'bx ) && ( datout2_prev[6] !== datout2_expected_prev[6] )
		&& ((datout2_expected_prev[6] !== last_datout2_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datout2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datout2_expected_prev);
		$display ("     Real value = %b", datout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_datout2_exp[6] = datout2_expected_prev[6];
	end
	if (
		( datout2_expected_prev[7] !== 1'bx ) && ( datout2_prev[7] !== datout2_expected_prev[7] )
		&& ((datout2_expected_prev[7] !== last_datout2_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datout2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datout2_expected_prev);
		$display ("     Real value = %b", datout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_datout2_exp[7] = datout2_expected_prev[7];
	end
	if (
		( m0_expected_prev[0] !== 1'bx ) && ( m0_prev[0] !== m0_expected_prev[0] )
		&& ((m0_expected_prev[0] !== last_m0_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m0_expected_prev);
		$display ("     Real value = %b", m0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_m0_exp[0] = m0_expected_prev[0];
	end
	if (
		( m0_expected_prev[1] !== 1'bx ) && ( m0_prev[1] !== m0_expected_prev[1] )
		&& ((m0_expected_prev[1] !== last_m0_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m0_expected_prev);
		$display ("     Real value = %b", m0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_m0_exp[1] = m0_expected_prev[1];
	end
	if (
		( m0_expected_prev[2] !== 1'bx ) && ( m0_prev[2] !== m0_expected_prev[2] )
		&& ((m0_expected_prev[2] !== last_m0_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m0_expected_prev);
		$display ("     Real value = %b", m0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_m0_exp[2] = m0_expected_prev[2];
	end
	if (
		( m0_expected_prev[3] !== 1'bx ) && ( m0_prev[3] !== m0_expected_prev[3] )
		&& ((m0_expected_prev[3] !== last_m0_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m0_expected_prev);
		$display ("     Real value = %b", m0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_m0_exp[3] = m0_expected_prev[3];
	end
	if (
		( m0_expected_prev[4] !== 1'bx ) && ( m0_prev[4] !== m0_expected_prev[4] )
		&& ((m0_expected_prev[4] !== last_m0_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m0_expected_prev);
		$display ("     Real value = %b", m0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_m0_exp[4] = m0_expected_prev[4];
	end
	if (
		( m0_expected_prev[5] !== 1'bx ) && ( m0_prev[5] !== m0_expected_prev[5] )
		&& ((m0_expected_prev[5] !== last_m0_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m0_expected_prev);
		$display ("     Real value = %b", m0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_m0_exp[5] = m0_expected_prev[5];
	end
	if (
		( m0_expected_prev[6] !== 1'bx ) && ( m0_prev[6] !== m0_expected_prev[6] )
		&& ((m0_expected_prev[6] !== last_m0_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m0_expected_prev);
		$display ("     Real value = %b", m0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_m0_exp[6] = m0_expected_prev[6];
	end
	if (
		( m0_expected_prev[7] !== 1'bx ) && ( m0_prev[7] !== m0_expected_prev[7] )
		&& ((m0_expected_prev[7] !== last_m0_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m0_expected_prev);
		$display ("     Real value = %b", m0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_m0_exp[7] = m0_expected_prev[7];
	end
	if (
		( m1_expected_prev[0] !== 1'bx ) && ( m1_prev[0] !== m1_expected_prev[0] )
		&& ((m1_expected_prev[0] !== last_m1_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m1_expected_prev);
		$display ("     Real value = %b", m1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_m1_exp[0] = m1_expected_prev[0];
	end
	if (
		( m1_expected_prev[1] !== 1'bx ) && ( m1_prev[1] !== m1_expected_prev[1] )
		&& ((m1_expected_prev[1] !== last_m1_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m1_expected_prev);
		$display ("     Real value = %b", m1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_m1_exp[1] = m1_expected_prev[1];
	end
	if (
		( m1_expected_prev[2] !== 1'bx ) && ( m1_prev[2] !== m1_expected_prev[2] )
		&& ((m1_expected_prev[2] !== last_m1_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m1_expected_prev);
		$display ("     Real value = %b", m1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_m1_exp[2] = m1_expected_prev[2];
	end
	if (
		( m1_expected_prev[3] !== 1'bx ) && ( m1_prev[3] !== m1_expected_prev[3] )
		&& ((m1_expected_prev[3] !== last_m1_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m1_expected_prev);
		$display ("     Real value = %b", m1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_m1_exp[3] = m1_expected_prev[3];
	end
	if (
		( m1_expected_prev[4] !== 1'bx ) && ( m1_prev[4] !== m1_expected_prev[4] )
		&& ((m1_expected_prev[4] !== last_m1_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m1_expected_prev);
		$display ("     Real value = %b", m1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_m1_exp[4] = m1_expected_prev[4];
	end
	if (
		( m1_expected_prev[5] !== 1'bx ) && ( m1_prev[5] !== m1_expected_prev[5] )
		&& ((m1_expected_prev[5] !== last_m1_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m1_expected_prev);
		$display ("     Real value = %b", m1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_m1_exp[5] = m1_expected_prev[5];
	end
	if (
		( m1_expected_prev[6] !== 1'bx ) && ( m1_prev[6] !== m1_expected_prev[6] )
		&& ((m1_expected_prev[6] !== last_m1_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m1_expected_prev);
		$display ("     Real value = %b", m1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_m1_exp[6] = m1_expected_prev[6];
	end
	if (
		( m1_expected_prev[7] !== 1'bx ) && ( m1_prev[7] !== m1_expected_prev[7] )
		&& ((m1_expected_prev[7] !== last_m1_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m1_expected_prev);
		$display ("     Real value = %b", m1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_m1_exp[7] = m1_expected_prev[7];
	end
	if (
		( m2_expected_prev[0] !== 1'bx ) && ( m2_prev[0] !== m2_expected_prev[0] )
		&& ((m2_expected_prev[0] !== last_m2_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m2_expected_prev);
		$display ("     Real value = %b", m2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_m2_exp[0] = m2_expected_prev[0];
	end
	if (
		( m2_expected_prev[1] !== 1'bx ) && ( m2_prev[1] !== m2_expected_prev[1] )
		&& ((m2_expected_prev[1] !== last_m2_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m2_expected_prev);
		$display ("     Real value = %b", m2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_m2_exp[1] = m2_expected_prev[1];
	end
	if (
		( m2_expected_prev[2] !== 1'bx ) && ( m2_prev[2] !== m2_expected_prev[2] )
		&& ((m2_expected_prev[2] !== last_m2_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m2_expected_prev);
		$display ("     Real value = %b", m2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_m2_exp[2] = m2_expected_prev[2];
	end
	if (
		( m2_expected_prev[3] !== 1'bx ) && ( m2_prev[3] !== m2_expected_prev[3] )
		&& ((m2_expected_prev[3] !== last_m2_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m2_expected_prev);
		$display ("     Real value = %b", m2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_m2_exp[3] = m2_expected_prev[3];
	end
	if (
		( m2_expected_prev[4] !== 1'bx ) && ( m2_prev[4] !== m2_expected_prev[4] )
		&& ((m2_expected_prev[4] !== last_m2_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m2_expected_prev);
		$display ("     Real value = %b", m2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_m2_exp[4] = m2_expected_prev[4];
	end
	if (
		( m2_expected_prev[5] !== 1'bx ) && ( m2_prev[5] !== m2_expected_prev[5] )
		&& ((m2_expected_prev[5] !== last_m2_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m2_expected_prev);
		$display ("     Real value = %b", m2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_m2_exp[5] = m2_expected_prev[5];
	end
	if (
		( m2_expected_prev[6] !== 1'bx ) && ( m2_prev[6] !== m2_expected_prev[6] )
		&& ((m2_expected_prev[6] !== last_m2_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m2_expected_prev);
		$display ("     Real value = %b", m2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_m2_exp[6] = m2_expected_prev[6];
	end
	if (
		( m2_expected_prev[7] !== 1'bx ) && ( m2_prev[7] !== m2_expected_prev[7] )
		&& ((m2_expected_prev[7] !== last_m2_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m2_expected_prev);
		$display ("     Real value = %b", m2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_m2_exp[7] = m2_expected_prev[7];
	end
	if (
		( m3_expected_prev[0] !== 1'bx ) && ( m3_prev[0] !== m3_expected_prev[0] )
		&& ((m3_expected_prev[0] !== last_m3_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m3_expected_prev);
		$display ("     Real value = %b", m3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_m3_exp[0] = m3_expected_prev[0];
	end
	if (
		( m3_expected_prev[1] !== 1'bx ) && ( m3_prev[1] !== m3_expected_prev[1] )
		&& ((m3_expected_prev[1] !== last_m3_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m3_expected_prev);
		$display ("     Real value = %b", m3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_m3_exp[1] = m3_expected_prev[1];
	end
	if (
		( m3_expected_prev[2] !== 1'bx ) && ( m3_prev[2] !== m3_expected_prev[2] )
		&& ((m3_expected_prev[2] !== last_m3_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m3_expected_prev);
		$display ("     Real value = %b", m3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_m3_exp[2] = m3_expected_prev[2];
	end
	if (
		( m3_expected_prev[3] !== 1'bx ) && ( m3_prev[3] !== m3_expected_prev[3] )
		&& ((m3_expected_prev[3] !== last_m3_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m3_expected_prev);
		$display ("     Real value = %b", m3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_m3_exp[3] = m3_expected_prev[3];
	end
	if (
		( m3_expected_prev[4] !== 1'bx ) && ( m3_prev[4] !== m3_expected_prev[4] )
		&& ((m3_expected_prev[4] !== last_m3_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m3_expected_prev);
		$display ("     Real value = %b", m3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_m3_exp[4] = m3_expected_prev[4];
	end
	if (
		( m3_expected_prev[5] !== 1'bx ) && ( m3_prev[5] !== m3_expected_prev[5] )
		&& ((m3_expected_prev[5] !== last_m3_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m3_expected_prev);
		$display ("     Real value = %b", m3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_m3_exp[5] = m3_expected_prev[5];
	end
	if (
		( m3_expected_prev[6] !== 1'bx ) && ( m3_prev[6] !== m3_expected_prev[6] )
		&& ((m3_expected_prev[6] !== last_m3_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m3_expected_prev);
		$display ("     Real value = %b", m3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_m3_exp[6] = m3_expected_prev[6];
	end
	if (
		( m3_expected_prev[7] !== 1'bx ) && ( m3_prev[7] !== m3_expected_prev[7] )
		&& ((m3_expected_prev[7] !== last_m3_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m3_expected_prev);
		$display ("     Real value = %b", m3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_m3_exp[7] = m3_expected_prev[7];
	end
	if (
		( m4_expected_prev[0] !== 1'bx ) && ( m4_prev[0] !== m4_expected_prev[0] )
		&& ((m4_expected_prev[0] !== last_m4_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m4_expected_prev);
		$display ("     Real value = %b", m4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_m4_exp[0] = m4_expected_prev[0];
	end
	if (
		( m4_expected_prev[1] !== 1'bx ) && ( m4_prev[1] !== m4_expected_prev[1] )
		&& ((m4_expected_prev[1] !== last_m4_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m4_expected_prev);
		$display ("     Real value = %b", m4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_m4_exp[1] = m4_expected_prev[1];
	end
	if (
		( m4_expected_prev[2] !== 1'bx ) && ( m4_prev[2] !== m4_expected_prev[2] )
		&& ((m4_expected_prev[2] !== last_m4_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m4_expected_prev);
		$display ("     Real value = %b", m4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_m4_exp[2] = m4_expected_prev[2];
	end
	if (
		( m4_expected_prev[3] !== 1'bx ) && ( m4_prev[3] !== m4_expected_prev[3] )
		&& ((m4_expected_prev[3] !== last_m4_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m4_expected_prev);
		$display ("     Real value = %b", m4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_m4_exp[3] = m4_expected_prev[3];
	end
	if (
		( m4_expected_prev[4] !== 1'bx ) && ( m4_prev[4] !== m4_expected_prev[4] )
		&& ((m4_expected_prev[4] !== last_m4_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m4_expected_prev);
		$display ("     Real value = %b", m4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_m4_exp[4] = m4_expected_prev[4];
	end
	if (
		( m4_expected_prev[5] !== 1'bx ) && ( m4_prev[5] !== m4_expected_prev[5] )
		&& ((m4_expected_prev[5] !== last_m4_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m4_expected_prev);
		$display ("     Real value = %b", m4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_m4_exp[5] = m4_expected_prev[5];
	end
	if (
		( m4_expected_prev[6] !== 1'bx ) && ( m4_prev[6] !== m4_expected_prev[6] )
		&& ((m4_expected_prev[6] !== last_m4_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m4_expected_prev);
		$display ("     Real value = %b", m4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_m4_exp[6] = m4_expected_prev[6];
	end
	if (
		( m4_expected_prev[7] !== 1'bx ) && ( m4_prev[7] !== m4_expected_prev[7] )
		&& ((m4_expected_prev[7] !== last_m4_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m4_expected_prev);
		$display ("     Real value = %b", m4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_m4_exp[7] = m4_expected_prev[7];
	end
	if (
		( memre_expected_prev !== 1'bx ) && ( memre_prev !== memre_expected_prev )
		&& ((memre_expected_prev !== last_memre_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memre :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memre_expected_prev);
		$display ("     Real value = %b", memre_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_memre_exp = memre_expected_prev;
	end
	if (
		( memwe_expected_prev !== 1'bx ) && ( memwe_prev !== memwe_expected_prev )
		&& ((memwe_expected_prev !== last_memwe_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memwe :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memwe_expected_prev);
		$display ("     Real value = %b", memwe_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_memwe_exp = memwe_expected_prev;
	end
	if (
		( pcvalue_expected_prev[0] !== 1'bx ) && ( pcvalue_prev[0] !== pcvalue_expected_prev[0] )
		&& ((pcvalue_expected_prev[0] !== last_pcvalue_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcvalue[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcvalue_expected_prev);
		$display ("     Real value = %b", pcvalue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_pcvalue_exp[0] = pcvalue_expected_prev[0];
	end
	if (
		( pcvalue_expected_prev[1] !== 1'bx ) && ( pcvalue_prev[1] !== pcvalue_expected_prev[1] )
		&& ((pcvalue_expected_prev[1] !== last_pcvalue_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcvalue[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcvalue_expected_prev);
		$display ("     Real value = %b", pcvalue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_pcvalue_exp[1] = pcvalue_expected_prev[1];
	end
	if (
		( pcvalue_expected_prev[2] !== 1'bx ) && ( pcvalue_prev[2] !== pcvalue_expected_prev[2] )
		&& ((pcvalue_expected_prev[2] !== last_pcvalue_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcvalue[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcvalue_expected_prev);
		$display ("     Real value = %b", pcvalue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_pcvalue_exp[2] = pcvalue_expected_prev[2];
	end
	if (
		( pcvalue_expected_prev[3] !== 1'bx ) && ( pcvalue_prev[3] !== pcvalue_expected_prev[3] )
		&& ((pcvalue_expected_prev[3] !== last_pcvalue_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcvalue[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcvalue_expected_prev);
		$display ("     Real value = %b", pcvalue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_pcvalue_exp[3] = pcvalue_expected_prev[3];
	end
	if (
		( pcvalue_expected_prev[4] !== 1'bx ) && ( pcvalue_prev[4] !== pcvalue_expected_prev[4] )
		&& ((pcvalue_expected_prev[4] !== last_pcvalue_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcvalue[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcvalue_expected_prev);
		$display ("     Real value = %b", pcvalue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_pcvalue_exp[4] = pcvalue_expected_prev[4];
	end
	if (
		( pcvalue_expected_prev[5] !== 1'bx ) && ( pcvalue_prev[5] !== pcvalue_expected_prev[5] )
		&& ((pcvalue_expected_prev[5] !== last_pcvalue_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcvalue[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcvalue_expected_prev);
		$display ("     Real value = %b", pcvalue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_pcvalue_exp[5] = pcvalue_expected_prev[5];
	end
	if (
		( pcvalue_expected_prev[6] !== 1'bx ) && ( pcvalue_prev[6] !== pcvalue_expected_prev[6] )
		&& ((pcvalue_expected_prev[6] !== last_pcvalue_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcvalue[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcvalue_expected_prev);
		$display ("     Real value = %b", pcvalue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_pcvalue_exp[6] = pcvalue_expected_prev[6];
	end
	if (
		( pcvalue_expected_prev[7] !== 1'bx ) && ( pcvalue_prev[7] !== pcvalue_expected_prev[7] )
		&& ((pcvalue_expected_prev[7] !== last_pcvalue_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcvalue[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcvalue_expected_prev);
		$display ("     Real value = %b", pcvalue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_pcvalue_exp[7] = pcvalue_expected_prev[7];
	end
	if (
		( regwe_expected_prev !== 1'bx ) && ( regwe_prev !== regwe_expected_prev )
		&& ((regwe_expected_prev !== last_regwe_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regwe :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regwe_expected_prev);
		$display ("     Real value = %b", regwe_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_regwe_exp = regwe_expected_prev;
	end
	if (
		( regwirtedata_expected_prev[0] !== 1'bx ) && ( regwirtedata_prev[0] !== regwirtedata_expected_prev[0] )
		&& ((regwirtedata_expected_prev[0] !== last_regwirtedata_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regwirtedata[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regwirtedata_expected_prev);
		$display ("     Real value = %b", regwirtedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_regwirtedata_exp[0] = regwirtedata_expected_prev[0];
	end
	if (
		( regwirtedata_expected_prev[1] !== 1'bx ) && ( regwirtedata_prev[1] !== regwirtedata_expected_prev[1] )
		&& ((regwirtedata_expected_prev[1] !== last_regwirtedata_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regwirtedata[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regwirtedata_expected_prev);
		$display ("     Real value = %b", regwirtedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_regwirtedata_exp[1] = regwirtedata_expected_prev[1];
	end
	if (
		( regwirtedata_expected_prev[2] !== 1'bx ) && ( regwirtedata_prev[2] !== regwirtedata_expected_prev[2] )
		&& ((regwirtedata_expected_prev[2] !== last_regwirtedata_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regwirtedata[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regwirtedata_expected_prev);
		$display ("     Real value = %b", regwirtedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_regwirtedata_exp[2] = regwirtedata_expected_prev[2];
	end
	if (
		( regwirtedata_expected_prev[3] !== 1'bx ) && ( regwirtedata_prev[3] !== regwirtedata_expected_prev[3] )
		&& ((regwirtedata_expected_prev[3] !== last_regwirtedata_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regwirtedata[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regwirtedata_expected_prev);
		$display ("     Real value = %b", regwirtedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_regwirtedata_exp[3] = regwirtedata_expected_prev[3];
	end
	if (
		( regwirtedata_expected_prev[4] !== 1'bx ) && ( regwirtedata_prev[4] !== regwirtedata_expected_prev[4] )
		&& ((regwirtedata_expected_prev[4] !== last_regwirtedata_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regwirtedata[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regwirtedata_expected_prev);
		$display ("     Real value = %b", regwirtedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_regwirtedata_exp[4] = regwirtedata_expected_prev[4];
	end
	if (
		( regwirtedata_expected_prev[5] !== 1'bx ) && ( regwirtedata_prev[5] !== regwirtedata_expected_prev[5] )
		&& ((regwirtedata_expected_prev[5] !== last_regwirtedata_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regwirtedata[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regwirtedata_expected_prev);
		$display ("     Real value = %b", regwirtedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_regwirtedata_exp[5] = regwirtedata_expected_prev[5];
	end
	if (
		( regwirtedata_expected_prev[6] !== 1'bx ) && ( regwirtedata_prev[6] !== regwirtedata_expected_prev[6] )
		&& ((regwirtedata_expected_prev[6] !== last_regwirtedata_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regwirtedata[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regwirtedata_expected_prev);
		$display ("     Real value = %b", regwirtedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_regwirtedata_exp[6] = regwirtedata_expected_prev[6];
	end
	if (
		( regwirtedata_expected_prev[7] !== 1'bx ) && ( regwirtedata_prev[7] !== regwirtedata_expected_prev[7] )
		&& ((regwirtedata_expected_prev[7] !== last_regwirtedata_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regwirtedata[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regwirtedata_expected_prev);
		$display ("     Real value = %b", regwirtedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_regwirtedata_exp[7] = regwirtedata_expected_prev[7];
	end
	if (
		( rg0_expected_prev[0] !== 1'bx ) && ( rg0_prev[0] !== rg0_expected_prev[0] )
		&& ((rg0_expected_prev[0] !== last_rg0_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg0_expected_prev);
		$display ("     Real value = %b", rg0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_rg0_exp[0] = rg0_expected_prev[0];
	end
	if (
		( rg0_expected_prev[1] !== 1'bx ) && ( rg0_prev[1] !== rg0_expected_prev[1] )
		&& ((rg0_expected_prev[1] !== last_rg0_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg0_expected_prev);
		$display ("     Real value = %b", rg0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_rg0_exp[1] = rg0_expected_prev[1];
	end
	if (
		( rg0_expected_prev[2] !== 1'bx ) && ( rg0_prev[2] !== rg0_expected_prev[2] )
		&& ((rg0_expected_prev[2] !== last_rg0_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg0_expected_prev);
		$display ("     Real value = %b", rg0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_rg0_exp[2] = rg0_expected_prev[2];
	end
	if (
		( rg0_expected_prev[3] !== 1'bx ) && ( rg0_prev[3] !== rg0_expected_prev[3] )
		&& ((rg0_expected_prev[3] !== last_rg0_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg0_expected_prev);
		$display ("     Real value = %b", rg0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_rg0_exp[3] = rg0_expected_prev[3];
	end
	if (
		( rg0_expected_prev[4] !== 1'bx ) && ( rg0_prev[4] !== rg0_expected_prev[4] )
		&& ((rg0_expected_prev[4] !== last_rg0_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg0_expected_prev);
		$display ("     Real value = %b", rg0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_rg0_exp[4] = rg0_expected_prev[4];
	end
	if (
		( rg0_expected_prev[5] !== 1'bx ) && ( rg0_prev[5] !== rg0_expected_prev[5] )
		&& ((rg0_expected_prev[5] !== last_rg0_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg0_expected_prev);
		$display ("     Real value = %b", rg0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_rg0_exp[5] = rg0_expected_prev[5];
	end
	if (
		( rg0_expected_prev[6] !== 1'bx ) && ( rg0_prev[6] !== rg0_expected_prev[6] )
		&& ((rg0_expected_prev[6] !== last_rg0_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg0_expected_prev);
		$display ("     Real value = %b", rg0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_rg0_exp[6] = rg0_expected_prev[6];
	end
	if (
		( rg0_expected_prev[7] !== 1'bx ) && ( rg0_prev[7] !== rg0_expected_prev[7] )
		&& ((rg0_expected_prev[7] !== last_rg0_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg0_expected_prev);
		$display ("     Real value = %b", rg0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_rg0_exp[7] = rg0_expected_prev[7];
	end
	if (
		( rg1_expected_prev[0] !== 1'bx ) && ( rg1_prev[0] !== rg1_expected_prev[0] )
		&& ((rg1_expected_prev[0] !== last_rg1_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg1_expected_prev);
		$display ("     Real value = %b", rg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_rg1_exp[0] = rg1_expected_prev[0];
	end
	if (
		( rg1_expected_prev[1] !== 1'bx ) && ( rg1_prev[1] !== rg1_expected_prev[1] )
		&& ((rg1_expected_prev[1] !== last_rg1_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg1_expected_prev);
		$display ("     Real value = %b", rg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_rg1_exp[1] = rg1_expected_prev[1];
	end
	if (
		( rg1_expected_prev[2] !== 1'bx ) && ( rg1_prev[2] !== rg1_expected_prev[2] )
		&& ((rg1_expected_prev[2] !== last_rg1_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg1_expected_prev);
		$display ("     Real value = %b", rg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_rg1_exp[2] = rg1_expected_prev[2];
	end
	if (
		( rg1_expected_prev[3] !== 1'bx ) && ( rg1_prev[3] !== rg1_expected_prev[3] )
		&& ((rg1_expected_prev[3] !== last_rg1_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg1_expected_prev);
		$display ("     Real value = %b", rg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_rg1_exp[3] = rg1_expected_prev[3];
	end
	if (
		( rg1_expected_prev[4] !== 1'bx ) && ( rg1_prev[4] !== rg1_expected_prev[4] )
		&& ((rg1_expected_prev[4] !== last_rg1_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg1_expected_prev);
		$display ("     Real value = %b", rg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_rg1_exp[4] = rg1_expected_prev[4];
	end
	if (
		( rg1_expected_prev[5] !== 1'bx ) && ( rg1_prev[5] !== rg1_expected_prev[5] )
		&& ((rg1_expected_prev[5] !== last_rg1_exp[5]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg1_expected_prev);
		$display ("     Real value = %b", rg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_rg1_exp[5] = rg1_expected_prev[5];
	end
	if (
		( rg1_expected_prev[6] !== 1'bx ) && ( rg1_prev[6] !== rg1_expected_prev[6] )
		&& ((rg1_expected_prev[6] !== last_rg1_exp[6]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg1_expected_prev);
		$display ("     Real value = %b", rg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_rg1_exp[6] = rg1_expected_prev[6];
	end
	if (
		( rg1_expected_prev[7] !== 1'bx ) && ( rg1_prev[7] !== rg1_expected_prev[7] )
		&& ((rg1_expected_prev[7] !== last_rg1_exp[7]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg1_expected_prev);
		$display ("     Real value = %b", rg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_rg1_exp[7] = rg1_expected_prev[7];
	end
	if (
		( rg2_expected_prev[0] !== 1'bx ) && ( rg2_prev[0] !== rg2_expected_prev[0] )
		&& ((rg2_expected_prev[0] !== last_rg2_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg2_expected_prev);
		$display ("     Real value = %b", rg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_rg2_exp[0] = rg2_expected_prev[0];
	end
	if (
		( rg2_expected_prev[1] !== 1'bx ) && ( rg2_prev[1] !== rg2_expected_prev[1] )
		&& ((rg2_expected_prev[1] !== last_rg2_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg2_expected_prev);
		$display ("     Real value = %b", rg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_rg2_exp[1] = rg2_expected_prev[1];
	end
	if (
		( rg2_expected_prev[2] !== 1'bx ) && ( rg2_prev[2] !== rg2_expected_prev[2] )
		&& ((rg2_expected_prev[2] !== last_rg2_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg2_expected_prev);
		$display ("     Real value = %b", rg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_rg2_exp[2] = rg2_expected_prev[2];
	end
	if (
		( rg2_expected_prev[3] !== 1'bx ) && ( rg2_prev[3] !== rg2_expected_prev[3] )
		&& ((rg2_expected_prev[3] !== last_rg2_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg2_expected_prev);
		$display ("     Real value = %b", rg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_rg2_exp[3] = rg2_expected_prev[3];
	end
	if (
		( rg2_expected_prev[4] !== 1'bx ) && ( rg2_prev[4] !== rg2_expected_prev[4] )
		&& ((rg2_expected_prev[4] !== last_rg2_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg2_expected_prev);
		$display ("     Real value = %b", rg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_rg2_exp[4] = rg2_expected_prev[4];
	end
	if (
		( rg2_expected_prev[5] !== 1'bx ) && ( rg2_prev[5] !== rg2_expected_prev[5] )
		&& ((rg2_expected_prev[5] !== last_rg2_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg2_expected_prev);
		$display ("     Real value = %b", rg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_rg2_exp[5] = rg2_expected_prev[5];
	end
	if (
		( rg2_expected_prev[6] !== 1'bx ) && ( rg2_prev[6] !== rg2_expected_prev[6] )
		&& ((rg2_expected_prev[6] !== last_rg2_exp[6]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg2_expected_prev);
		$display ("     Real value = %b", rg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_rg2_exp[6] = rg2_expected_prev[6];
	end
	if (
		( rg2_expected_prev[7] !== 1'bx ) && ( rg2_prev[7] !== rg2_expected_prev[7] )
		&& ((rg2_expected_prev[7] !== last_rg2_exp[7]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg2_expected_prev);
		$display ("     Real value = %b", rg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_rg2_exp[7] = rg2_expected_prev[7];
	end
	if (
		( rg3_expected_prev[0] !== 1'bx ) && ( rg3_prev[0] !== rg3_expected_prev[0] )
		&& ((rg3_expected_prev[0] !== last_rg3_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg3_expected_prev);
		$display ("     Real value = %b", rg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_rg3_exp[0] = rg3_expected_prev[0];
	end
	if (
		( rg3_expected_prev[1] !== 1'bx ) && ( rg3_prev[1] !== rg3_expected_prev[1] )
		&& ((rg3_expected_prev[1] !== last_rg3_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg3_expected_prev);
		$display ("     Real value = %b", rg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_rg3_exp[1] = rg3_expected_prev[1];
	end
	if (
		( rg3_expected_prev[2] !== 1'bx ) && ( rg3_prev[2] !== rg3_expected_prev[2] )
		&& ((rg3_expected_prev[2] !== last_rg3_exp[2]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg3_expected_prev);
		$display ("     Real value = %b", rg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_rg3_exp[2] = rg3_expected_prev[2];
	end
	if (
		( rg3_expected_prev[3] !== 1'bx ) && ( rg3_prev[3] !== rg3_expected_prev[3] )
		&& ((rg3_expected_prev[3] !== last_rg3_exp[3]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg3_expected_prev);
		$display ("     Real value = %b", rg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_rg3_exp[3] = rg3_expected_prev[3];
	end
	if (
		( rg3_expected_prev[4] !== 1'bx ) && ( rg3_prev[4] !== rg3_expected_prev[4] )
		&& ((rg3_expected_prev[4] !== last_rg3_exp[4]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg3_expected_prev);
		$display ("     Real value = %b", rg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_rg3_exp[4] = rg3_expected_prev[4];
	end
	if (
		( rg3_expected_prev[5] !== 1'bx ) && ( rg3_prev[5] !== rg3_expected_prev[5] )
		&& ((rg3_expected_prev[5] !== last_rg3_exp[5]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg3_expected_prev);
		$display ("     Real value = %b", rg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_rg3_exp[5] = rg3_expected_prev[5];
	end
	if (
		( rg3_expected_prev[6] !== 1'bx ) && ( rg3_prev[6] !== rg3_expected_prev[6] )
		&& ((rg3_expected_prev[6] !== last_rg3_exp[6]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg3_expected_prev);
		$display ("     Real value = %b", rg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_rg3_exp[6] = rg3_expected_prev[6];
	end
	if (
		( rg3_expected_prev[7] !== 1'bx ) && ( rg3_prev[7] !== rg3_expected_prev[7] )
		&& ((rg3_expected_prev[7] !== last_rg3_exp[7]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rg3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rg3_expected_prev);
		$display ("     Real value = %b", rg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_rg3_exp[7] = rg3_expected_prev[7];
	end
	if (
		( writeaddr_expected_prev[0] !== 1'bx ) && ( writeaddr_prev[0] !== writeaddr_expected_prev[0] )
		&& ((writeaddr_expected_prev[0] !== last_writeaddr_exp[0]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeaddr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeaddr_expected_prev);
		$display ("     Real value = %b", writeaddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_writeaddr_exp[0] = writeaddr_expected_prev[0];
	end
	if (
		( writeaddr_expected_prev[1] !== 1'bx ) && ( writeaddr_prev[1] !== writeaddr_expected_prev[1] )
		&& ((writeaddr_expected_prev[1] !== last_writeaddr_exp[1]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeaddr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeaddr_expected_prev);
		$display ("     Real value = %b", writeaddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_writeaddr_exp[1] = writeaddr_expected_prev[1];
	end
	if (
		( writeaddr_expected_prev[2] !== 1'bx ) && ( writeaddr_prev[2] !== writeaddr_expected_prev[2] )
		&& ((writeaddr_expected_prev[2] !== last_writeaddr_exp[2]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeaddr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeaddr_expected_prev);
		$display ("     Real value = %b", writeaddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_writeaddr_exp[2] = writeaddr_expected_prev[2];
	end
	if (
		( writeaddr_expected_prev[3] !== 1'bx ) && ( writeaddr_prev[3] !== writeaddr_expected_prev[3] )
		&& ((writeaddr_expected_prev[3] !== last_writeaddr_exp[3]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeaddr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeaddr_expected_prev);
		$display ("     Real value = %b", writeaddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_writeaddr_exp[3] = writeaddr_expected_prev[3];
	end
	if (
		( writeaddr_expected_prev[4] !== 1'bx ) && ( writeaddr_prev[4] !== writeaddr_expected_prev[4] )
		&& ((writeaddr_expected_prev[4] !== last_writeaddr_exp[4]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeaddr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeaddr_expected_prev);
		$display ("     Real value = %b", writeaddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_writeaddr_exp[4] = writeaddr_expected_prev[4];
	end
	if (
		( writeaddr_expected_prev[5] !== 1'bx ) && ( writeaddr_prev[5] !== writeaddr_expected_prev[5] )
		&& ((writeaddr_expected_prev[5] !== last_writeaddr_exp[5]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeaddr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeaddr_expected_prev);
		$display ("     Real value = %b", writeaddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_writeaddr_exp[5] = writeaddr_expected_prev[5];
	end
	if (
		( writeaddr_expected_prev[6] !== 1'bx ) && ( writeaddr_prev[6] !== writeaddr_expected_prev[6] )
		&& ((writeaddr_expected_prev[6] !== last_writeaddr_exp[6]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeaddr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeaddr_expected_prev);
		$display ("     Real value = %b", writeaddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_writeaddr_exp[6] = writeaddr_expected_prev[6];
	end
	if (
		( writeaddr_expected_prev[7] !== 1'bx ) && ( writeaddr_prev[7] !== writeaddr_expected_prev[7] )
		&& ((writeaddr_expected_prev[7] !== last_writeaddr_exp[7]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeaddr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeaddr_expected_prev);
		$display ("     Real value = %b", writeaddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_writeaddr_exp[7] = writeaddr_expected_prev[7];
	end
	if (
		( writedata_expected_prev[0] !== 1'bx ) && ( writedata_prev[0] !== writedata_expected_prev[0] )
		&& ((writedata_expected_prev[0] !== last_writedata_exp[0]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writedata[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writedata_expected_prev);
		$display ("     Real value = %b", writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_writedata_exp[0] = writedata_expected_prev[0];
	end
	if (
		( writedata_expected_prev[1] !== 1'bx ) && ( writedata_prev[1] !== writedata_expected_prev[1] )
		&& ((writedata_expected_prev[1] !== last_writedata_exp[1]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writedata[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writedata_expected_prev);
		$display ("     Real value = %b", writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_writedata_exp[1] = writedata_expected_prev[1];
	end
	if (
		( writedata_expected_prev[2] !== 1'bx ) && ( writedata_prev[2] !== writedata_expected_prev[2] )
		&& ((writedata_expected_prev[2] !== last_writedata_exp[2]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writedata[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writedata_expected_prev);
		$display ("     Real value = %b", writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_writedata_exp[2] = writedata_expected_prev[2];
	end
	if (
		( writedata_expected_prev[3] !== 1'bx ) && ( writedata_prev[3] !== writedata_expected_prev[3] )
		&& ((writedata_expected_prev[3] !== last_writedata_exp[3]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writedata[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writedata_expected_prev);
		$display ("     Real value = %b", writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_writedata_exp[3] = writedata_expected_prev[3];
	end
	if (
		( writedata_expected_prev[4] !== 1'bx ) && ( writedata_prev[4] !== writedata_expected_prev[4] )
		&& ((writedata_expected_prev[4] !== last_writedata_exp[4]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writedata[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writedata_expected_prev);
		$display ("     Real value = %b", writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_writedata_exp[4] = writedata_expected_prev[4];
	end
	if (
		( writedata_expected_prev[5] !== 1'bx ) && ( writedata_prev[5] !== writedata_expected_prev[5] )
		&& ((writedata_expected_prev[5] !== last_writedata_exp[5]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writedata[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writedata_expected_prev);
		$display ("     Real value = %b", writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_writedata_exp[5] = writedata_expected_prev[5];
	end
	if (
		( writedata_expected_prev[6] !== 1'bx ) && ( writedata_prev[6] !== writedata_expected_prev[6] )
		&& ((writedata_expected_prev[6] !== last_writedata_exp[6]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writedata[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writedata_expected_prev);
		$display ("     Real value = %b", writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_writedata_exp[6] = writedata_expected_prev[6];
	end
	if (
		( writedata_expected_prev[7] !== 1'bx ) && ( writedata_prev[7] !== writedata_expected_prev[7] )
		&& ((writedata_expected_prev[7] !== last_writedata_exp[7]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writedata[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writedata_expected_prev);
		$display ("     Real value = %b", writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_writedata_exp[7] = writedata_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module cpu_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire [7:0] ad;
wire Alu;
wire [7:0] ALudata;
wire [7:0] dataout;
wire [7:0] datout2;
wire [7:0] m0;
wire [7:0] m1;
wire [7:0] m2;
wire [7:0] m3;
wire [7:0] m4;
wire memre;
wire memwe;
wire [7:0] pcvalue;
wire regwe;
wire [7:0] regwirtedata;
wire [7:0] rg0;
wire [7:0] rg1;
wire [7:0] rg2;
wire [7:0] rg3;
wire [7:0] writeaddr;
wire [7:0] writedata;

wire sampler;                             

// assign statements (if any)                          
cpu i1 (
// port map - connection between master ports and signals/registers   
	.ad(ad),
	.Alu(Alu),
	.ALudata(ALudata),
	.clk(clk),
	.dataout(dataout),
	.datout2(datout2),
	.m0(m0),
	.m1(m1),
	.m2(m2),
	.m3(m3),
	.m4(m4),
	.memre(memre),
	.memwe(memwe),
	.pcvalue(pcvalue),
	.regwe(regwe),
	.regwirtedata(regwirtedata),
	.rg0(rg0),
	.rg1(rg1),
	.rg2(rg2),
	.rg3(rg3),
	.writeaddr(writeaddr),
	.writedata(writedata)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

cpu_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

cpu_vlg_check_tst tb_out(
	.ad(ad),
	.Alu(Alu),
	.ALudata(ALudata),
	.dataout(dataout),
	.datout2(datout2),
	.m0(m0),
	.m1(m1),
	.m2(m2),
	.m3(m3),
	.m4(m4),
	.memre(memre),
	.memwe(memwe),
	.pcvalue(pcvalue),
	.regwe(regwe),
	.regwirtedata(regwirtedata),
	.rg0(rg0),
	.rg1(rg1),
	.rg2(rg2),
	.rg3(rg3),
	.writeaddr(writeaddr),
	.writedata(writedata),
	.sampler_rx(sampler)
);
endmodule

